public class Permutation{

  public static ArrayList<String> permutation(String s) {
		
		ArrayList<String> res = new ArrayList<String>();
		// If input string's length is 1, return {s}
		if (s.length() == 1) {
			res.add(s);
		} else if (s.length() > 1) {
			int lastIndex = s.length() - 1;
			// Find out the last character

			String last = s.substring(lastIndex);
			// Rest of the string
			String rest = s.substring(0, lastIndex);
			// Perform permutation on the rest string and
			// merge with the last character
			res = merge(permutation(rest), last);
		}
		return res;
	}

	public static ArrayList<String> merge(ArrayList<String> list, String c) {
		ArrayList<String> res = new ArrayList<String>();
		// Loop through all the string in the list
		for (String s : list) {
			// For each string, insert the last character to all possible
			// postions
			// and add them to the new list
			for (int i = 0; i <= s.length(); ++i) {
				String ps = new StringBuffer(s).insert(i, c).toString();
					res.add(ps);
			}
		}
		return res;
	}
  public static void main(String [] args){
    System.out.println(new Permutation().permutation("abcd").toString());
  }
}
