import java.util.Stack;
/*
 * Imagine a robot sitting on the upper left hand corner of an NxN grid. 
 * The robot can only move in two directions: right and down. 
 * How many possible paths are there for the robot?
 *  FOLLOW UP Imagine certain squares are “off limits”, 
 *  such that the robot can not step on them. 
 *  Design an algorithm to get all possible paths for the robot.
 */
public class MyRobot {

	public int getPath(int x , int y , Stack st){
		if(x == 0 && y == 0){
			System.out.println(st.toString());
			return 1;
		}
		
		if(x < 0 || y < 0) return 0;
		else{
			st.push(x+","+y);
		}
		
		int counter = getPath(x,y-1,st) + getPath(x-1,y,st);
		st.pop();
		return (counter);
	}
	
	public static void main(String [] args){
		System.out.println(new MyRobot().getPath(3, 2, new Stack()));
	}
}

class point{
	int x;
	int y;
	
	public point(int x , int y) {
		// TODO Auto-generated constructor stub
		this.x = x;
		this.y = y;
	}
}
